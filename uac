#!/bin/sh

# Copyright (C) 2019,2020 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the “License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# set path
PATH=/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin:/opt/sbin:/opt/local/bin:/netscaler
export PATH

# set locale
LC_ALL=C
export LC_ALL

# standards conformance for GNU utilities
_POSIX2_VERSION=199209
export _POSIX2_VERSION

# remove all existing aliases
unalias -a

# get current working dir
cd "`dirname "$0"`" && CWD=`pwd`
export CWD

# get current command
CMD="$0 $@"

# load lib files
for file in "$CWD"/lib/*.lib; do
    . "$file" > /dev/null
done

# load config file
. "$CWD/conf/uac.conf" > /dev/null

# set a default value for some variables
init_vars

# catch the signals
trap terminate INT TERM

SHIFT_OPT=""
while getopts "apnuywsdblf:c:o:k:e:P:R:T:VDUvh" opt; do
    case $opt in
        # collectors
        a)  COLLECTOR_PROCESS=true
            COLLECTOR_NETWORK=true
            COLLECTOR_USER=true
            COLLECTOR_SYSTEM=true
            COLLECTOR_HARDWARE=true
            COLLECTOR_SOFTWARE=true
            COLLECTOR_DISK_VOLUME_FILE_SYSTEM=true
            COLLECTOR_DOCKER_VIRTUAL_MACHINE=true
            COLLECTOR_BODY_FILE=true
            COLLECTOR_LOGS=true
            COLLECTOR_SUSPICIOUS_FILES=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT A"
            ;;
        c)  COLLECTOR_COMMANDS=true
            COLLECTOR_COMMANDS_ARGS="$COLLECTOR_COMMANDS_ARGS,`echo "$OPTARG" | sed 's/ //g'`"
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT c $OPTARG"
            ;;
        o)  COLLECTOR_OPTIONS=true
            COLLECTOR_OPTIONS_ARGS="$COLLECTOR_OPTIONS_ARGS,`echo "$OPTARG" | sed 's/ //g'`"
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT o $OPTARG"
            ;;
        k)  COLLECTOR_COMMANDS=true
            COLLECTOR_OPTIONS=true
            COLLECTOR_COMMANDS_ARGS=""
            COLLECTOR_OPTIONS_ARGS=""
            USER_ALIASES="`echo "$OPTARG" | sed 's/,/\n/g' | sort | uniq`"
            for alias in $USER_ALIASES
            do
                COLLECTOR_OPTIONS_ARGS="$COLLECTOR_OPTIONS_ARGS,`eval "(echo \\$CUSTOM_ALIAS_$alias)"`"
                COLLECTOR_COMMANDS_ARGS="$COLLECTOR_COMMANDS_ARGS,`eval "(echo \\$CUSTOM_ALIAS_$alias)"`"
            done
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT k $OPTARG"
            ;;
        p)  COLLECTOR_PROCESS=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT p"
            ;;
        n)  COLLECTOR_NETWORK=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT n"
            ;;
        u)  COLLECTOR_USER=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT u"
            ;;
        y)  COLLECTOR_SYSTEM=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT y"
            ;;
        w)  COLLECTOR_HARDWARE=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT w"
            ;;
        s)  COLLECTOR_SOFTWARE=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT s"
            ;;
        d)  COLLECTOR_DISK_VOLUME_FILE_SYSTEM=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT d"
            ;;
        b)  COLLECTOR_BODY_FILE=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT b"
            ;;
        l)  COLLECTOR_LOGS=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT l"
            ;;
        f)  COLLECTOR_SUSPICIOUS_FILES=true
            ANY_COLLECTOR_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT f"
            ;;
        # extensions
        e)  for EXTENSION in `echo "$OPTARG" | sed 's:,: :g'`; do
                case "$EXTENSION" in
                    "all")
                        EXTENSION_CHKROOTKIT=true
                        EXTENSION_FLS=true
                        EXTENSION_HASH_EXEC=true
                        ;;
                    "chkrootkit")
                        EXTENSION_CHKROOTKIT=true
                        ;;
                    "fls")
                        EXTENSION_FLS=true
                        ;;
                    "hash_exec")
                        EXTENSION_HASH_EXEC=true
                        ;;
                    *)  uprintf "Invalid extension '$EXTENSION'\n"
                        exit 7
                        ;;
                esac
            done
            ANY_EXTENSION_SELECTED=true
            SHIFT_OPT="$SHIFT_OPT e $OPTARG"
            ;;
        # options
        P)  PROFILE="$OPTARG"
            if [ "$PROFILE" != "aix" ] && [ "$PROFILE" != "bsd" ] && [ "$PROFILE" != "linux" ] && [ "$PROFILE" != "macos" ] && [ "$PROFILE" != "solaris" ]; then
                uprintf "Invalid profile '$PROFILE'\n"
                exit 8
            fi
            SHIFT_OPT="$SHIFT_OPT P $PROFILE"
            ;;
        R)  # check if system can convert date to epoch
            get_epoch 2020-02-04 > /dev/null 2> /dev/null
            if [ $? -eq 0 ]; then
                TODAY=`get_date "+%Y-%m-%d"`
                if regex_match "^((19|20)[0-9][0-9])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$" "$OPTARG"; then
                    DATE_T1="$OPTARG"
                    DATE_RANGE_T1=`get_days_between_dates "$TODAY" "$DATE_T1"`
                elif regex_match "^((19|20)[0-9][0-9])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])..((19|20)[0-9][0-9])-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$" "$OPTARG"; then
                    DATE_T1=`echo "$OPTARG" | cut -d"." -f 1`
                    DATE_T2=`echo "$OPTARG" | cut -d"." -f 3`
                    DATE_RANGE_T1=`get_days_between_dates "$TODAY" "$DATE_T1"`
                    DATE_RANGE_T2=`get_days_between_dates "$TODAY" "$DATE_T2"`
                else
                    uprintf "Invalid date range '$OPTARG'\n"
                    exit 10
                fi
                if [ "$DATE_RANGE_T1" -gt 0 ]; then
                    uprintf "Invalid date range '$OPTARG'\n"
                    exit 11
                fi
                if [ "$DATE_RANGE_T2" ]; then
                    if [ "$DATE_RANGE_T1" -gt "$DATE_RANGE_T2" ]; then
                        uprintf "Invalid date range '$OPTARG'\n"
                        exit 12
                    fi
                    # one more day to be inclusive
                    DATE_RANGE_T1=`expr $EXPR_DASH_DASH $DATE_RANGE_T1 - 1`
                    DATE_RANGE_T2=`expr $EXPR_DASH_DASH $DATE_RANGE_T2 + 1`
                    if [ "$DATE_RANGE_T2" -eq 0 ] || [ "$DATE_RANGE_T2" -gt 0 ]; then
                        DATE_RANGE_T2=""
                    else
                        # to be used properly with find -atime, -mtime or -ctime, second parameter needs to be positive
                        DATE_RANGE_T2=`expr $EXPR_DASH_DASH $DATE_RANGE_T2 \* -1`
                        DATE_RANGE_T2="+$DATE_RANGE_T2"
                    fi
                else
                    # one more day to be inclusive
                    DATE_RANGE_T1=`expr $EXPR_DASH_DASH $DATE_RANGE_T1 - 1`
                fi
            else
                uprintf "Date range option is not supported by this system\n"
                exit 9
            fi
            SHIFT_OPT="$SHIFT_OPT R $OPTARG"
            ;;
        T)  if [ -n "$OPTARG" ]; then
                SCP_TRANSFER=true
                SCP_DESTINATION="$OPTARG"
                SHIFT_OPT="$SHIFT_OPT T $OPTARG"
            else
                uprintf "Invalid scp destination '$OPTARG'\n"
                exit 13
            fi
            ;;
        V)  VERBOSE=true
            SHIFT_OPT="$SHIFT_OPT V"
            ;;
        D)  DEBUG=true
            SHIFT_OPT="$SHIFT_OPT D"
            ;;
        U)  RUN_AS_NON_ROOT=true
            SHIFT_OPT="$SHIFT_OPT U"
            ;;
        v)  uprintf "UAC (Unix-like Artifacts Collector) v$UAC_VERSION\n"
            exit 0
            ;;
        h)  usage
            exit 0
            ;;
        ?)  exit 1
            ;;
    esac
done
for SHIFT in $SHIFT_OPT; do shift; done

if $ANY_COLLECTOR_SELECTED || $ANY_EXTENSION_SELECTED; then
    if [ ! "$PROFILE" ]; then
        PROFILE=`get_profile`
    fi
    if [ "$PROFILE" = "aix" ] || [ "$PROFILE" = "bsd" ] || [ "$PROFILE" = "linux" ] || [ "$PROFILE" = "macos" ] || [ "$PROFILE" = "solaris" ]; then
        if is_running_as_root || $RUN_AS_NON_ROOT; then

            # the current directory will be used as the destination directory if none was provided by the user
            if [ "$1" ]; then
                # check if the destination directory exists
                if [ -d "$1" ]; then
                    # get the absolute path for the destination directory
                    cd "$1" && DESTINATION_DIR=`pwd` && cd "$CWD"
                else
                    uprintf "Destination directory '$1' does not exist\n"
                    exit 4
                fi
            else
                # set the current diretory as the destination directory
                DESTINATION_DIR="$CWD"
            fi

            MOUNT_POINT=`sanitize_path "$MOUNT_POINT"`
            if [ -d "$MOUNT_POINT" ]; then

                CURRENT_DATE_TIME=`get_date "+%Y%m%d%H%M%S"`

                if $LIVE_COLLECTION; then
                    HOSTNAME=`get_hostname`
                    KERNEL_NAME=`uname -s`
                    MACHINE_ARCH=`get_machine_arch`
                    # create a tmp dir to store all collected data
                    TMP_DATA_DIR="uac-$HOSTNAME-$PROFILE-$CURRENT_DATE_TIME"
                else
                    # create a tmp dir to store all collected data
                    TMP_DATA_DIR="uac-mounted_image-$PROFILE-$CURRENT_DATE_TIME"
                fi

                mkdir "$DESTINATION_DIR/$TMP_DATA_DIR" > /dev/null
                if [ -d "$DESTINATION_DIR/$TMP_DATA_DIR" ]; then

                    # uac log file
                    UAC_LOG_FILE="$DESTINATION_DIR/$TMP_DATA_DIR/uac.log"

                    CURRENT_LOGGED_IN_USER=`get_current_logged_in_user`
                    logging I "--------------------------------------------------------------------------------\n"
                    logging I "  __   __ _______ _______ \n"
                    logging I " |: | |  |:  _   |:  ____|\n"
                    logging I " |  |_|  |  | |  |  |____ \n"
                    logging I " |_______|__| |__|_______|\n"
                    logging I "\n"
                    logging I "Unix-like Artifacts Collector v$UAC_VERSION\n"
                    logging I "--------------------------------------------------------------------------------\n"
                    $VERBOSE && logging I "Command Line: $CMD\n" || logging D "Command Line: $CMD\n"
                    logging I "Destination: $DESTINATION_DIR/$TMP_DATA_DIR\n"
                    $LIVE_COLLECTION && logging I "Kernel Name (Arch): $KERNEL_NAME ($MACHINE_ARCH)\n"
                    logging I "Profile: $PROFILE\n"
                    $LIVE_COLLECTION && logging I "Hostname: $HOSTNAME\n"
                    logging I "Mount Point: $MOUNT_POINT\n"
                    logging I "Current User: $CURRENT_LOGGED_IN_USER\n"
                    logging I "--------------------------------------------------------------------------------\n"
                    logging I "Some collectors may take several minutes to finish, so please wait!\n"
                    logging I "Press Ctrl+C any time to cancel the script.\n"
                    logging I "--------------------------------------------------------------------------------\n"
                    $LIVE_COLLECTION || logging I "UAC is being run against a forensic image mounted at $MOUNT_POINT\n"
                    $LIVE_COLLECTION || logging I "Live/volatile data collectors will be disabled automatically.\n"
                    $LIVE_COLLECTION || logging I "--------------------------------------------------------------------------------\n"

                    if $LIVE_COLLECTION; then
                        KERNEL_NAME_LOWERCASE=`to_lower $KERNEL_NAME`
                        MACHINE_ARCH_LOWERCASE=`to_lower $MACHINE_ARCH`
                        # add validated tools (binary files) directory to the system PATH
                        if [ -d "$CWD/bin/$KERNEL_NAME_LOWERCASE/$MACHINE_ARCH_LOWERCASE" ]; then
                            logging D "Validated tools directory found at $CWD/bin/$KERNEL_NAME_LOWERCASE/$MACHINE_ARCH_LOWERCASE\n"
                            run_command "ls \"$CWD/bin/$KERNEL_NAME_LOWERCASE/$MACHINE_ARCH_LOWERCASE\"" "$UAC_LOG_FILE"
                            PATH="$CWD/bin/$KERNEL_NAME_LOWERCASE/$MACHINE_ARCH_LOWERCASE:$PATH"
                            export PATH
                        fi
                    fi

                    logging D "PATH: $PATH\n"

                    # get current PID
                    logging D "Current PID: $$\n"

                    # set some variables according to the available tools on the target system
                    check_tools

                    # make a backup of the configuration files used during the collection
                    run_command "cp -r \"$CWD/conf\" \"$DESTINATION_DIR/$TMP_DATA_DIR/conf\""

                    UAC_START_EPOCH=`get_epoch`
                    CURRENT_DATE_TIME=`get_date "+%a %b %d %H:%M:%S %Y %z"`
                    logging D "Collection started: $CURRENT_DATE_TIME\n"

                    # collectors
                    # run commands collector
                    $COLLECTOR_COMMANDS && $LIVE_COLLECTION && run_collector commands 2>> "$UAC_LOG_FILE"

                    # run options collector
                    $COLLECTOR_OPTIONS && $LIVE_COLLECTION && run_collector options 2>> "$UAC_LOG_FILE"

                    # run process collector
                    $COLLECTOR_PROCESS && $LIVE_COLLECTION && run_collector process 2>> "$UAC_LOG_FILE"

                    # run network collector
                    $COLLECTOR_NETWORK && $LIVE_COLLECTION && run_collector network 2>> "$UAC_LOG_FILE"

                    # run user collector
                    $COLLECTOR_USER && $LIVE_COLLECTION && run_collector user 2>> "$UAC_LOG_FILE"

                    # run system collector
                    $COLLECTOR_SYSTEM && $LIVE_COLLECTION && run_collector system 2>> "$UAC_LOG_FILE"

                    # run hardware collector
                    $COLLECTOR_HARDWARE && $LIVE_COLLECTION && run_collector hardware 2>> "$UAC_LOG_FILE"

                    # run software collector
                    $COLLECTOR_SOFTWARE && $LIVE_COLLECTION && run_collector software 2>> "$UAC_LOG_FILE"

                    # run disk_volume_file_system collector
                    $COLLECTOR_DISK_VOLUME_FILE_SYSTEM && $LIVE_COLLECTION && run_collector disk_volume_file_system 2>> "$UAC_LOG_FILE"

                    # run docker_virtual_machine collector
                    $COLLECTOR_DOCKER_VIRTUAL_MACHINE && $LIVE_COLLECTION && run_collector docker_virtual_machine 2>> "$UAC_LOG_FILE"

                    # run body_file collector
                    $COLLECTOR_BODY_FILE && run_collector body_file 2>> "$UAC_LOG_FILE"

                    # run system_files collector
                    $COLLECTOR_SYSTEM && run_collector system_files 2>> "$UAC_LOG_FILE"

                    # run user_files collector
                    $COLLECTOR_USER && run_collector user_files 2>> "$UAC_LOG_FILE"

                    # run logs collector
                    $COLLECTOR_LOGS && run_collector logs 2>> "$UAC_LOG_FILE"

                    # run suspicious_files collector
                    $COLLECTOR_SUSPICIOUS_FILES && run_collector suspicious_files 2>> "$UAC_LOG_FILE"

                    # extensions
                    # run chkrootkit extension
                    $EXTENSION_CHKROOTKIT && run_extension chkrootkit 2>> "$UAC_LOG_FILE"

                    # run fls extension
                    $EXTENSION_FLS && run_extension fls 2>> "$UAC_LOG_FILE"

                    # run hash_exec extension
                    $EXTENSION_HASH_EXEC && run_extension hash_exec 2>> "$UAC_LOG_FILE"

                    logging I "--------------------------------------------------------------------------------\n"
                    UAC_END_EPOCH=`get_epoch`
                    UAC_TOTAL_RUNNING_TIME=`expr $EXPR_DASH_DASH $UAC_END_EPOCH - $UAC_START_EPOCH`
                    CURRENT_DATE_TIME=`get_date "+%a %b %d %H:%M:%S %Y %z"`
                    logging D "Collection finished: $CURRENT_DATE_TIME\n"
                    logging D "Total running time: $UAC_TOTAL_RUNNING_TIME seconds.\n"

                    uprintf "Collection finished! Total running time: $UAC_TOTAL_RUNNING_TIME seconds.\n"

                    if ! $DEBUG && ${TAR_TOOL_AVAILABLE} && ${GZIP_TOOL_AVAILABLE}; then
                        # archive and compress output to file
                        uprintf "Creating compressed output file. Please wait...\n"
                        OUTPUT_FILE="$TMP_DATA_DIR.tar.gz"
                        cd "$DESTINATION_DIR"
                        if archive_compress_data "$TMP_DATA_DIR" "$OUTPUT_FILE"; then
                            uprintf "Compressed output file created at '$DESTINATION_DIR/$OUTPUT_FILE'\n"
                            rm -rf "$TMP_DATA_DIR" > /dev/null 2> /dev/null
                            if [ -d "$TMP_DATA_DIR" ]; then
                                uprintf "Cannot remove temporary directory '$DESTINATION_DIR/$TMP_DATA_DIR'\n"
                            fi
                        else
                            uprintf "Cannot create compressed output file\n"
                            uprintf "Please check collected data in '$DESTINATION_DIR/$TMP_DATA_DIR'\n"
                        fi
                        cd "$CWD"
                    elif ! $DEBUG && ${TAR_TOOL_AVAILABLE}; then
                        # archive output to file
                        uprintf "Creating output file. Please wait...\n"
                        OUTPUT_FILE="$TMP_DATA_DIR.tar"
                        cd "$DESTINATION_DIR"
                        if archive_data "$TMP_DATA_DIR" "$OUTPUT_FILE"; then
                            uprintf "Output file created at '$DESTINATION_DIR/$OUTPUT_FILE'\n"
                            rm -rf "$TMP_DATA_DIR" > /dev/null 2> /dev/null
                            if [ -d "$TMP_DATA_DIR" ]; then
                                uprintf "Cannot remove temporary directory '$DESTINATION_DIR/$TMP_DATA_DIR'\n"
                            fi
                        else
                            uprintf "Cannot create output file\n"
                            uprintf "Please check collected data in '$DESTINATION_DIR/$TMP_DATA_DIR'\n"
                        fi
                        cd "$CWD"
                    fi

                    # hash output file if it exists
                    if [ -f "$DESTINATION_DIR/$OUTPUT_FILE" ]; then
                        if [ -n "$MD5SUM_TOOL" ]; then
                            uprintf "Hashing output file. Please wait...\n"
                            cd "$DESTINATION_DIR"
                            $MD5SUM_TOOL "$OUTPUT_FILE" > "$OUTPUT_FILE.md5"
                            if [ -n "$OUTPUT_FILE.md5" ]; then
                                uprintf "MD5 hash output file created at '$DESTINATION_DIR/$OUTPUT_FILE.md5'\n"
                            else
                                uprintf "Cannot compute MD5 hash for '$DESTINATION_DIR/$OUTPUT_FILE'\n"
                                rm "$OUTPUT_FILE.md5"
                            fi
                            cd "$CWD"
                        fi
                    else
                        uprintf "Please check collected data in '$DESTINATION_DIR/$TMP_DATA_DIR'\n"
                    fi

                    if $SCP_TRANSFER; then
                        if [ -f "$DESTINATION_DIR/$OUTPUT_FILE" ]; then
                            # transfer output file
                            uprintf "Transfering '$DESTINATION_DIR/$OUTPUT_FILE' to '$SCP_DESTINATION'\n"
                            if scp_transfer "$DESTINATION_DIR/$OUTPUT_FILE" "$SCP_DESTINATION" "$SCP_PORT"; then
                                uprintf "File transferred successfully\n"
                            else
                                uprintf "Could not transfer file\n"
                            fi
                            if [ -f "$DESTINATION_DIR/$OUTPUT_FILE.md5" ]; then
                                # transfer output file
                                uprintf "Transfering '$DESTINATION_DIR/$OUTPUT_FILE.md5' to '$SCP_DESTINATION'\n"
                                if scp_transfer "$DESTINATION_DIR/$OUTPUT_FILE.md5" "$SCP_DESTINATION" "$SCP_PORT"; then
                                    uprintf "File transferred successfully\n"
                                else
                                    uprintf "Could not transfer file\n"
                                fi
                            fi
                        else
                            # transfer output directory
                            uprintf "Transfering '$DESTINATION_DIR/$TMP_DATA_DIR' to '$SCP_DESTINATION'\n"
                            if scp_transfer "$DESTINATION_DIR/$TMP_DATA_DIR" "$SCP_DESTINATION" "$SCP_PORT"; then
                                uprintf "Directory transferred successfully\n"
                            else
                                uprintf "Could not transfer directory\n"
                            fi
                        fi
                    fi

                else
                    uprintf "Cannot create temporary directory '$DESTINATION_DIR/$TMP_DATA_DIR'\n"
                    exit 6
                fi
            else
                uprintf "Invalid mount point '$MOUNT_POINT'\n"
                exit 5
            fi
        else
            uprintf "This script requires root privileges to run properly.\n"
            exit 3
        fi
    else
        uprintf "Unsupported profile '$PROFILE'. Please use -P to force one of the supported profiles.\n"
        exit 2
    fi
else
    usage
    exit 1
fi
exit 0
